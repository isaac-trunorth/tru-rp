//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub manager_id: i32,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub user_name: String,
    pub password: String,
    pub access_level: i16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::time_entries::Entity")]
    TimeEntries,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ManagerId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
}

impl Related<super::time_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimeEntries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
